// Sistema de notifica√ß√µes push do CozilTech
// Gerencia permiss√µes, envio e exibi√ß√£o de notifica√ß√µes

// üîä Gerar som de notifica√ß√£o usando Web Audio API
export function playNotificationSound() {
  try {
    const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)()
    
    // Criar oscilador para gerar o som
    const oscillator = audioContext.createOscillator()
    const gainNode = audioContext.createGain()
    
    // Conectar oscilador ao ganho e ao destino
    oscillator.connect(gainNode)
    gainNode.connect(audioContext.destination)
    
    // Configurar som (frequ√™ncias para criar um "ding" agrad√°vel)
    oscillator.type = 'sine'
    oscillator.frequency.setValueAtTime(800, audioContext.currentTime) // Frequ√™ncia inicial
    oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.1) // Decai suavemente
    
    // Configurar volume com envelope (fade in/out)
    gainNode.gain.setValueAtTime(0, audioContext.currentTime)
    gainNode.gain.linearRampToValueAtTime(0.3, audioContext.currentTime + 0.01) // Fade in r√°pido
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5) // Fade out suave
    
    // Tocar o som
    oscillator.start(audioContext.currentTime)
    oscillator.stop(audioContext.currentTime + 0.5)
    
    console.log('üîä Som de notifica√ß√£o reproduzido')
  } catch (error) {
    console.error('‚ùå Erro ao reproduzir som:', error)
  }
}

// üîî Solicitar permiss√£o para notifica√ß√µes
export async function requestNotificationPermission(): Promise<NotificationPermission> {
  if (!('Notification' in window)) {
    console.warn('‚ö†Ô∏è Notifica√ß√µes n√£o suportadas neste navegador')
    return 'denied'
  }

  if (Notification.permission === 'granted') {
    console.log('‚úÖ Permiss√£o j√° concedida')
    return 'granted'
  }

  if (Notification.permission === 'denied') {
    console.log('‚ùå Permiss√£o negada')
    return 'denied'
  }

  // Solicitar permiss√£o
  const permission = await Notification.requestPermission()
  console.log('üîî Permiss√£o de notifica√ß√£o:', permission)
  return permission
}

// üì¢ Enviar notifica√ß√£o local (sem servidor)
export async function sendLocalNotification(title: string, options?: NotificationOptions) {
  const permission = await requestNotificationPermission()
  
  if (permission !== 'granted') {
    console.warn('‚ö†Ô∏è Permiss√£o de notifica√ß√£o n√£o concedida')
    return null
  }

  // Tocar som antes de mostrar notifica√ß√£o
  playNotificationSound()

  // Configura√ß√µes padr√£o
  const defaultOptions: NotificationOptions = {
    icon: '/icon-192x192.png',
    badge: '/icon-192x192.png',
    vibrate: [200, 100, 200],
    requireInteraction: false,
    ...options
  }

  try {
    const notification = new Notification(title, defaultOptions)
    
    // Evento ao clicar na notifica√ß√£o
    notification.onclick = () => {
      window.focus()
      notification.close()
    }

    console.log('üîî Notifica√ß√£o enviada:', title)
    return notification
  } catch (error) {
    console.error('‚ùå Erro ao enviar notifica√ß√£o:', error)
    return null
  }
}

// üìã Notifica√ß√£o de nova OS criada
export async function notifyNewOS(numeroOS: string, solicitante: string, setor: string) {
  return sendLocalNotification('üÜï Nova Ordem de Servi√ßo!', {
    body: `OS #${numeroOS}\nSolicitante: ${solicitante}\nSetor: ${setor}`,
    tag: `os-${numeroOS}`,
    icon: '/icon-512x512.png',
    requireInteraction: true,
  })
}

// ‚úèÔ∏è Notifica√ß√£o de OS atualizada
export async function notifyOSUpdated(numeroOS: string, status: string) {
  return sendLocalNotification('‚úèÔ∏è OS Atualizada', {
    body: `OS #${numeroOS}\nNovo status: ${status}`,
    tag: `os-${numeroOS}`,
  })
}

// ‚úÖ Notifica√ß√£o de OS conclu√≠da
export async function notifyOSCompleted(numeroOS: string) {
  return sendLocalNotification('‚úÖ OS Conclu√≠da!', {
    body: `A Ordem de Servi√ßo #${numeroOS} foi conclu√≠da com sucesso.`,
    tag: `os-${numeroOS}`,
  })
}

// üîî Registrar Service Worker
export async function registerServiceWorker() {
  if (!('serviceWorker' in navigator)) {
    console.warn('‚ö†Ô∏è Service Worker n√£o suportado neste navegador')
    return null
  }

  try {
    const registration = await navigator.serviceWorker.register('/sw.js')
    console.log('‚úÖ Service Worker registrado:', registration)
    return registration
  } catch (error) {
    console.error('‚ùå Erro ao registrar Service Worker:', error)
    return null
  }
}

// üéØ Verificar se j√° tem permiss√£o
export function hasNotificationPermission(): boolean {
  return 'Notification' in window && Notification.permission === 'granted'
}

// üìä Status das notifica√ß√µes
export function getNotificationStatus() {
  if (!('Notification' in window)) {
    return 'not_supported'
  }
  return Notification.permission
}

