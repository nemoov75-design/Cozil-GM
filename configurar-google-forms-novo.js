/**
 * Script do Google Apps Script para enviar dados do formul√°rio para o site Cozil
 * Configurado para o novo formul√°rio com campos atualizados
 */

function doPost(e) {
  try {
    console.log('üìß Dados recebidos do formul√°rio:', e.postData.contents);
    
    // Parse dos dados do formul√°rio
    const formData = JSON.parse(e.postData.contents);
    console.log('üìã Dados processados:', formData);
    
    // Mapear os campos do novo formul√°rio
    const solicitante = formData['Solicitante'] || formData.solicitante || 'N√£o informado';
    
    const osData = {
      setor: formData['Setor'] || formData.setor || '',
      data: formData['Data da solicita√ß√£o'] || formData.data || new Date().toISOString().split('T')[0],
      equipamento: formData['Local'] || formData.equipamento || '',
      tipo_manutencao: formData['Tipo de Manuten√ß√£o'] || formData.tipoManutencao || '',
      prioridade: formData['Prioridade'] || formData.prioridade || '',
      descricao: formData['Descreva o servi√ßo...'] || formData.descricao || '',
      solicitante: solicitante,
      responsavel_setor: solicitante, // Usando solicitante como respons√°vel
      fotos: formData['Upload de Foto do Problema'] || formData.fotos || '',
      numero_os: generateOSNumber(),
      status: 'Em Andamento',
      created_at: new Date().toISOString()
    };
    
    // Validar se o setor est√° na lista permitida
    const setoresPermitidos = [
      'Portaria', 'Recep√ß√£o', 'RH', 'Comercial', 'Engenharia', 'Controladoria', 
      'Financeiro', 'Diretoria', 'Projetos', 'Acabamento', 'Mobili√°rio', 'CPC', 
      'Caldeiraria', 'Recebimento', 'Laborat√≥rio', 'Desenvolvimento', 'Log√≠stica', 
      'Show room', 'Estacionamento 1', 'Estacionamento 2', 'Almoxarifado'
    ];
    
    if (!setoresPermitidos.includes(osData.setor)) {
      console.warn('‚ö†Ô∏è Setor n√£o reconhecido:', osData.setor);
    }
    
    console.log('üîß OS mapeada:', osData);
    
    // Enviar para o site
    const response = sendToWebsite(osData);
    
    if (response.success) {
      console.log('‚úÖ OS enviada com sucesso!');
      return ContentService
        .createTextOutput(JSON.stringify({ success: true, message: 'OS criada com sucesso!' }))
        .setMimeType(ContentService.MimeType.JSON);
    } else {
      console.error('‚ùå Erro ao enviar OS:', response.error);
      return ContentService
        .createTextOutput(JSON.stringify({ success: false, error: response.error }))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
  } catch (error) {
    console.error('‚ùå Erro no processamento:', error);
    return ContentService
      .createTextOutput(JSON.stringify({ success: false, error: error.toString() }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

function sendToWebsite(osData) {
  try {
    const url = 'https://cozil-sistema-qxrx.vercel.app/api/os';
    
    const payload = {
      setor: osData.setor,
      data: osData.data,
      equipamento: osData.equipamento,
      tipoManutencao: osData.tipo_manutencao,
      prioridade: osData.prioridade,
      descricao: osData.descricao,
      solicitante: osData.solicitante,
      responsavelSetor: osData.solicitante, // Usar solicitante como responsavelSetor
      fotos: osData.fotos,
      numero_os: osData.numero_os,
      status: osData.status
    };
    
    console.log('üì§ Enviando para:', url);
    console.log('üì¶ Payload:', payload);
    
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      payload: JSON.stringify(payload)
    };
    
    const response = UrlFetchApp.fetch(url, options);
    const responseText = response.getContentText();
    
    console.log('üì• Resposta do site:', responseText);
    
    return JSON.parse(responseText);
    
  } catch (error) {
    console.error('‚ùå Erro na comunica√ß√£o:', error);
    return { success: false, error: error.toString() };
  }
}

function generateOSNumber() {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const time = String(now.getHours()).padStart(2, '0') + String(now.getMinutes()).padStart(2, '0');
  
  return `OS${year}${month}${day}${time}`;
}

// Fun√ß√£o para testar a conex√£o
function testConnection() {
  try {
    console.log('üß™ Testando conex√£o...');
    
    // Simular dados do formul√°rio
    const mockFormData = {
      'Solicitante': 'Sistema Teste',
      'Setor': 'Teste',
      'Data da solicita√ß√£o': new Date().toISOString().split('T')[0],
      'Local': 'Equipamento Teste',
      'Tipo de Manuten√ß√£o': 'Predial',
      'Prioridade': 'M√©dia',
      'Descreva o servi√ßo...': 'Teste de conex√£o',
      'Upload de Foto do Problema': ''
    };
    
    // Simular evento do formul√°rio
    const mockEvent = {
      postData: {
        contents: JSON.stringify(mockFormData)
      }
    };
    
    // Chamar doPost com dados simulados
    const result = doPost(mockEvent);
    
    if (result) {
      const response = JSON.parse(result.getContent());
      if (response.success) {
        console.log('‚úÖ Teste de conex√£o bem-sucedido!');
        return 'Conex√£o OK!';
      } else {
        console.log('‚ùå Teste de conex√£o falhou:', response.error);
        return 'Erro: ' + response.error;
      }
    } else {
      console.log('‚ùå Teste de conex√£o falhou: Sem resposta');
      return 'Erro: Sem resposta';
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
    return 'Erro: ' + error.toString();
  }
}
